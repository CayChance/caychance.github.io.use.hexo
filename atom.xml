<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Chance的个人学习笔记</title>
  
  <subtitle>Chance`blog</subtitle>
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2018-12-10T04:23:37.552Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>[object Object]</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>浏览器缓存机制</title>
    <link href="http://yoursite.com/2018/12/07/%E6%B5%8F%E8%A7%88%E5%99%A8%E7%BC%93%E5%AD%98%E6%9C%BA%E5%88%B6/"/>
    <id>http://yoursite.com/2018/12/07/浏览器缓存机制/</id>
    <published>2018-12-06T16:43:58.000Z</published>
    <updated>2018-12-10T04:23:37.552Z</updated>
    
    <content type="html"><![CDATA[<hr><p>（PS:这篇文章，就是纯粹的纸上谈兵哈，并没有实践过。所以一定要自己动手试试。）</p><h4 id="浏览器缓存的基本原理"><a href="#浏览器缓存的基本原理" class="headerlink" title="浏览器缓存的基本原理"></a>浏览器缓存的基本原理</h4><p>1）浏览器在加载资源时，根据请求头的<code>expires</code>和<code>cache-control</code>判断是否命中强缓存，是则直接从缓存读取资源，不会发请求到服务器。<br>2）如果没有命中强缓存，浏览器一定会发送一个请求到服务器，通过<code>last-modified</code>和<code>etag</code>验证资源是否命中协商缓存，如果命中，服务器会将这个请求返回，但是不会返回这个资源的数据，依然是从缓存中读取资源<br>3）如果前面两者都没有命中，直接从服务器加载资源</p><h4 id="浏览器缓存类型："><a href="#浏览器缓存类型：" class="headerlink" title="浏览器缓存类型："></a>浏览器缓存类型：</h4><p>浏览器的缓存分为两种：强缓存和协商缓存。</p><p>强缓存：不会向服务器发送请求，直接从缓存中读取资源。</p><p>协商缓存：向服务器发送请求，服务器会根据这个请求的request header的一些参数来判断是否命中协商缓存，如果命中，则返回304状态码并带上新的response header通知浏览器从缓存中读取资源；</p><h4 id="区别"><a href="#区别" class="headerlink" title="区别"></a>区别</h4><p>共同点：两者都是从客户端缓存中读取资源；区别：强缓存不会向服务器发送请求，写上缓存会向服务器发送请求。</p><h4 id="强缓存相关字段"><a href="#强缓存相关字段" class="headerlink" title="强缓存相关字段"></a>强缓存相关字段</h4><p>Expires和Cache-Control</p><p>1）Expires</p><p>Expires是http1.0提出的一个表示资源过期时间的header，它描述的是一个绝对时间，由服务器返回。<br>Expires 受限于本地时间，如果修改了本地时间，可能会造成缓存失效</p><blockquote><p>Expires: Wed, 11 May 2018 07:20:00 GMT</p></blockquote><p>2）Cache-Control</p><p>Cache-Control 出现于 HTTP / 1.1，优先级高于 Expires ,表示的是相对时间</p><blockquote><p>Cache-Control: max-age=315360000</p></blockquote><h4 id="协商缓存相关字段"><a href="#协商缓存相关字段" class="headerlink" title="协商缓存相关字段"></a>协商缓存相关字段</h4><p>协商缓存是利用的是【Last-Modified，If-Modified-Since】和【ETag、If-None-Match】这两对Header来管理的。</p><p>1）Last-Modified，If-Modified-Since</p><p><code>Last-Modified</code> 表示本地文件最后修改日期，浏览器会在request header加上<code>If-Modified-Since</code>（上次返回的<code>Last-Modified</code>的值），询问服务器在该日期后资源是否有更新，有更新的话就会将新的资源发送回来</p><p>但是如果在本地打开缓存文件，就会造成 Last-Modified 被修改，所以在 HTTP / 1.1 出现了 ETag</p><p>2）ETag、If-None-Match</p><p><code>Etag</code>就像一个指纹，资源变化都会导致<code>ETag</code>变化，跟最后修改时间没有关系，<code>ETag</code>可以保证每一个资源是唯一的</p><p><code>If-None-Match</code>的header会将上次返回的<code>Etag</code>发送给服务器，询问该资源的<code>Etag</code>是否有更新，有变动就会发送新的资源回来</p><p>3）ETag的优先级比Last-Modified更高</p><p>具体为什么要用<code>ETag</code>，主要出于下面几种情况考虑：</p><ul><li>一些文件也许会周期性的更改，但是他的内容并不改变(仅仅改变的修改时间)，这个时候我们并不希望客户端认为这个文件被修改了，而重新GET；</li><li>某些文件修改非常频繁，比如在秒以下的时间内进行修改，(比方说1s内修改了N次)，If-Modified-Since能检查到的粒度是s级的，这种修改无法判断(或者说UNIX记录MTIME只能精确到秒)；</li><li>某些服务器不能精确的得到文件的最后修改时间。</li></ul><p><a href="https://github.com/amandakelake/blog/issues/41" target="_blank" rel="noopener">参考链接</a><br><a href="https://mp.weixin.qq.com/s?__biz=MjM5MTA1MjAxMQ==&amp;mid=2651226262&amp;idx=1&amp;sn=2128db200b88479face67ed8e095757c&amp;chksm=bd4959128a3ed0041b43a5683c75c4b88c7d35fac909a59c14b4e9fc11e8d408680b171d2706&amp;scene=21#wechat_redirect" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;hr&gt;
&lt;p&gt;（PS:这篇文章，就是纯粹的纸上谈兵哈，并没有实践过。所以一定要自己动手试试。）&lt;/p&gt;
&lt;h4 id=&quot;浏览器缓存的基本原理&quot;&gt;&lt;a href=&quot;#浏览器缓存的基本原理&quot; class=&quot;headerlink&quot; title=&quot;浏览器缓存的基本原理&quot;&gt;&lt;/a&gt;浏览器
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="缓存" scheme="http://yoursite.com/tags/%E7%BC%93%E5%AD%98/"/>
    
  </entry>
  
  <entry>
    <title>js event loop</title>
    <link href="http://yoursite.com/2018/12/06/js-event-loop/"/>
    <id>http://yoursite.com/2018/12/06/js-event-loop/</id>
    <published>2018-12-06T15:45:40.000Z</published>
    <updated>2018-12-06T08:20:37.781Z</updated>
    
    <content type="html"><![CDATA[<h3 id="JS-Event-Loop"><a href="#JS-Event-Loop" class="headerlink" title="JS Event Loop"></a>JS Event Loop</h3><hr>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;JS-Event-Loop&quot;&gt;&lt;a href=&quot;#JS-Event-Loop&quot; class=&quot;headerlink&quot; title=&quot;JS Event Loop&quot;&gt;&lt;/a&gt;JS Event Loop&lt;/h3&gt;&lt;hr&gt;

      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="event loop" scheme="http://yoursite.com/tags/event-loop/"/>
    
  </entry>
  
  <entry>
    <title>markdown</title>
    <link href="http://yoursite.com/2018/12/05/markdown/"/>
    <id>http://yoursite.com/2018/12/05/markdown/</id>
    <published>2018-12-05T14:13:45.000Z</published>
    <updated>2018-12-06T05:11:01.513Z</updated>
    
    <content type="html"><![CDATA[<h3 id="markdown常用语法"><a href="#markdown常用语法" class="headerlink" title="markdown常用语法"></a>markdown常用语法</h3><hr><h4 id="目录"><a href="#目录" class="headerlink" title="目录"></a>目录</h4><ul><li><a href="#1">标题</a></li><li><a href="#2">引入代码</a></li><li><a href="#3">外链</a></li><li><a href="#4">引入图片</a></li><li><a href="#5">引用</a></li><li><a href="#6">缩进</a></li><li><a href="#7">斜体</a></li><li><a href="#8">加粗</a></li><li><a href="#9">分割线</a></li><li><a href="#10">待办</a></li><li><a href="#11目录锚点">目录锚点</a></li><li><a href="#12引入单句代码">引入单句代码</a><br><h4 id="1">1、标题</h4><br>井号#后面空一格<figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="section"># 一级标题</span></span><br><span class="line"><span class="section">## 二级标题</span></span><br><span class="line"><span class="section">### 三级标题</span></span><br><span class="line"><span class="section">#### 四级标题</span></span><br><span class="line"><span class="section">##### 五级标题</span></span><br><span class="line"><span class="section">###### 六级标题</span></span><br></pre></td></tr></table></figure></li></ul><h1 id="一级标题"><a href="#一级标题" class="headerlink" title="一级标题"></a>一级标题</h1><h2 id="二级标题"><a href="#二级标题" class="headerlink" title="二级标题"></a>二级标题</h2><h3 id="三级标题"><a href="#三级标题" class="headerlink" title="三级标题"></a>三级标题</h3><h4 id="四级标题"><a href="#四级标题" class="headerlink" title="四级标题"></a>四级标题</h4><h5 id="五级标题"><a href="#五级标题" class="headerlink" title="五级标题"></a>五级标题</h5><h6 id="六级标题"><a href="#六级标题" class="headerlink" title="六级标题"></a>六级标题</h6><p></p><h4 id="2">2、引入代码</h4><br><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">add</span>(<span class="params">x,y</span>)</span>&#123;</span><br><span class="line">  <span class="keyword">return</span> x+y;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p></p><p></p><h4 id="3">3、外链</h4><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">[<span class="string">参考链接</span>](<span class="link">https://caychance.github.io/</span>)</span><br></pre></td></tr></table></figure><p></p><p><a href="https://caychance.github.io/" target="_blank" rel="noopener">参考链接</a></p><p></p><h4 id="4">4、引入图片</h4><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">![](https://ws1.sinaimg.cn/large/006tNbRwly1fxq7h427d7j30780c7t9o.jpg)</span><br></pre></td></tr></table></figure><p></p><p><img src="https://ws1.sinaimg.cn/large/006tNbRwly1fxq7h427d7j30780c7t9o.jpg" alt=""></p><p></p><h4 id="5">5、引用</h4><br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">&gt;一段引用的话</span><br><span class="line">换行了</span><br></pre></td></tr></table></figure><p></p><blockquote><p>一段引用的话<br>换行了</p></blockquote><p></p><h4 id="6">6、缩进</h4><br>三种方法<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">不带缩进的一行</span><br><span class="line">&amp;nbsp;不断行的空白格或&amp;#160;</span><br><span class="line">&amp;ensp;半方大的空白或&amp;#8194;</span><br><span class="line">&amp;emsp;全方大的空白或&amp;#8195;</span><br></pre></td></tr></table></figure><p></p><p>不带缩进的一行<br>&nbsp;不断行的空白格或&#160;<br>&ensp;半方大的空白或&#8194;<br>&emsp;全方大的空白或&#8195;</p><p></p><h4 id="7">7、斜体</h4><br>两种方法<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="emphasis">_这是斜体_</span></span><br><span class="line"><span class="emphasis">*这是斜体*</span></span><br></pre></td></tr></table></figure><p></p><p><em>这是斜体</em><br><em>这是斜体</em></p><p></p><h4 id="8">8、加粗</h4><br>两种方法<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="strong">__这是斜体__</span></span><br><span class="line"><span class="strong">**这是斜体**</span></span><br></pre></td></tr></table></figure><p></p><p><strong>这是斜体</strong><br><strong>这是斜体</strong></p><p></p><h4 id="9">9、分割线</h4><br>分割线只能标题下使用<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">##### 华丽的分割线</span></span><br><span class="line">---</span><br><span class="line">华丽的分割线</span><br></pre></td></tr></table></figure><p></p><h5 id="华丽的分割线"><a href="#华丽的分割线" class="headerlink" title="华丽的分割线"></a>华丽的分割线</h5><hr><p>华丽的分割线</p><p></p><h4 id="10">10、待办</h4><br>[ ] 前后都要有空格<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">- </span>[ ] 不勾选</span><br><span class="line"><span class="bullet">- </span>[x] 勾选</span><br></pre></td></tr></table></figure><p></p><ul><li style="list-style: none"><input type="checkbox"> 不勾选</li><li style="list-style: none"><input type="checkbox" checked> 勾选</li></ul><h4 id="11目录锚点"><a href="#11目录锚点" class="headerlink" title="11目录锚点"></a>11目录锚点</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="bullet">* </span>[<span class="string">中国</span>](<span class="link">#中国</span>)</span><br><span class="line">  * [<span class="string">北京</span>](<span class="link">#北京</span>)</span><br><span class="line">  * [<span class="string">陕西</span>](<span class="link">#陕西</span>)</span><br><span class="line"><span class="code">    * [西安](#西安_1)</span></span><br><span class="line"><span class="bullet">* </span>[<span class="string">美国</span>](<span class="link">#美国</span>)</span><br><span class="line">  * [<span class="string">纽约</span>](<span class="link">#纽约</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">俄罗斯</span>](<span class="link">#俄罗斯</span>)</span><br><span class="line">  * [<span class="string">莫斯科</span>](<span class="link">#莫斯科</span>)</span><br><span class="line"><span class="bullet">* </span>[<span class="string">希腊</span>](<span class="link">#希腊</span>)</span><br><span class="line">  * [<span class="string">有些尴尬</span>](<span class="link">#有些尴尬</span>)</span><br></pre></td></tr></table></figure><ul><li><a href="#中国">中国</a><ul><li><a href="#北京">北京</a></li><li><a href="#陕西">陕西</a><ul><li><a href="#西安_1">西安</a></li></ul></li></ul></li><li><a href="#美国">美国</a><ul><li><a href="#纽约">纽约</a></li></ul></li><li><a href="#俄罗斯">俄罗斯</a><ul><li><a href="#莫斯科">莫斯科</a></li></ul></li><li><a href="#希腊">希腊</a><ul><li><a href="#有些尴尬">有些尴尬</a></li></ul></li></ul><p></p><h4 id="西安_1">西安</h4><br>方法一：以标题西安为例。标题加一个id等于目录上西安的锚点西安_1。这种方式锚点中可以有特殊字符。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="xml"><span class="tag">&lt;<span class="name">h4</span> <span class="attr">id</span>=<span class="string">西安_1</span>&gt;</span></span>西安<span class="xml"><span class="tag">&lt;/<span class="name">h4</span>&gt;</span></span></span><br></pre></td></tr></table></figure><p></p><h4 id="纽约"><a href="#纽约" class="headerlink" title="纽约"></a>纽约</h4><p>方法二：以纽约为例。markdown的标题会自动加上锚点。例如下面的锚点自动就是纽约。不过这种方式设置的锚点中不能设置特殊字符。打开开发者模式查看一下元素就明白了。<br><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="section">#### 纽约</span></span><br></pre></td></tr></table></figure></p><h4 id="12引入单句代码"><a href="#12引入单句代码" class="headerlink" title="12引入单句代码"></a>12引入单句代码</h4><figure class="highlight markdown"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">使用<span class="code">`hexo server`</span>启动服务，使用<span class="code">`hexo g`</span>和<span class="code">`hexo d`</span>发布</span><br></pre></td></tr></table></figure><p>使用<code>hexo server</code>启动服务，使用<code>hexo g</code>和<code>hexo d</code>发布</p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;markdown常用语法&quot;&gt;&lt;a href=&quot;#markdown常用语法&quot; class=&quot;headerlink&quot; title=&quot;markdown常用语法&quot;&gt;&lt;/a&gt;markdown常用语法&lt;/h3&gt;&lt;hr&gt;
&lt;h4 id=&quot;目录&quot;&gt;&lt;a href=&quot;#目录&quot; cl
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="markdown" scheme="http://yoursite.com/tags/markdown/"/>
    
  </entry>
  
  <entry>
    <title>github没有记录你的contributions?</title>
    <link href="http://yoursite.com/2018/12/04/github%E6%B2%A1%E6%9C%89%E8%AE%B0%E5%BD%95%E4%BD%A0%E7%9A%84contributions/"/>
    <id>http://yoursite.com/2018/12/04/github没有记录你的contributions/</id>
    <published>2018-12-04T10:51:31.000Z</published>
    <updated>2018-12-05T08:20:27.501Z</updated>
    
    <content type="html"><![CDATA[<h2 id="github是怎么计算contributions的呢？"><a href="#github是怎么计算contributions的呢？" class="headerlink" title="github是怎么计算contributions的呢？"></a>github是怎么计算contributions的呢？</h2><hr><blockquote><h4 id="贡献的计算"><a href="#贡献的计算" class="headerlink" title="贡献的计算"></a>贡献的计算</h4><h5 id="Issues-and-pull请求"><a href="#Issues-and-pull请求" class="headerlink" title="Issues and pull请求"></a>Issues and pull请求</h5><p>   如果issues和pull请求是在独立库中打开而不是分叉（fork），它们将显示在您的贡献图上。</p><h5 id="Commits"><a href="#Commits" class="headerlink" title="Commits"></a>Commits</h5><p>   如果commits符合以下所有的条件，那么会在您的贡献图上有所显示。<br>   1.用于提交的电子邮件地址与您的GitHub帐户相关联。<br>   2.在独立的库中进行提交的，而不是分支（fork）。<br>   3.提交内容如下：<br>   &emsp;在库的默认分支。（通常是master分支）。<br>   &emsp;在gh-pages分支中（对于具有Project Pages站点的库）。</p></blockquote><p><a href="https://help.github.com/articles/why-are-my-contributions-not-showing-up-on-my-profile/" target="_blank" rel="noopener">参考</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;github是怎么计算contributions的呢？&quot;&gt;&lt;a href=&quot;#github是怎么计算contributions的呢？&quot; class=&quot;headerlink&quot; title=&quot;github是怎么计算contributions的呢？&quot;&gt;&lt;/a&gt;githu
      
    
    </summary>
    
      <category term="工具" scheme="http://yoursite.com/categories/%E5%B7%A5%E5%85%B7/"/>
    
    
      <category term="github" scheme="http://yoursite.com/tags/github/"/>
    
  </entry>
  
  <entry>
    <title>服务端渲染vs客户端渲染</title>
    <link href="http://yoursite.com/2018/12/03/%E6%9C%8D%E5%8A%A1%E7%AB%AF%E6%B8%B2%E6%9F%93vs%E5%AE%A2%E6%88%B7%E7%AB%AF%E6%B8%B2%E6%9F%93/"/>
    <id>http://yoursite.com/2018/12/03/服务端渲染vs客户端渲染/</id>
    <published>2018-12-02T22:25:08.000Z</published>
    <updated>2018-12-06T05:11:01.507Z</updated>
    
    <content type="html"><![CDATA[<h3 id="服务端渲染VS客户端渲染"><a href="#服务端渲染VS客户端渲染" class="headerlink" title="服务端渲染VS客户端渲染"></a>服务端渲染VS客户端渲染</h3><hr><p>前几天被人问到了nuxt是啥东西，我就知道这东西是vue的一个衍生品，别的就不知道了。然后吓得我回去赶紧翻开了nuxt的文档。</p><blockquote><p>Nuxt.js 是一个基于Vue.js 的轻量级应用框架，可用来创建服务端渲染(SSR) 应用，也可充当静态站点引擎生成静态站点应用，具有优雅的代码结构分层和热加载等balabala</p></blockquote><p>提到了一个词——服务端渲染，服务端渲染SSR（Server-Side Rendering）是什么？与之相对的是客户端渲染CSR（Client-Side Rendering）。<br>单从字面来理解，服务端渲染，就是服务端来渲染；客户端渲染则是客户端渲染。（这话听着像句废话）</p><h4 id="一、什么是服务端渲染和客户端渲染"><a href="#一、什么是服务端渲染和客户端渲染" class="headerlink" title="一、什么是服务端渲染和客户端渲染"></a>一、什么是服务端渲染和客户端渲染</h4><p>服务端渲染（后端渲染） 简单来说就是在服务器上把数据和模板拼接好以后发送给客户端显示。</p><p>客户端渲染（前端渲染） html 仅仅作为静态文件，客户端在请求时，服务端不做任何处理，直接以原文件的形式返回给客户端，然后客户端根据 html 上的 JavaScript，生成 DOM 插入 html。</p><p>现在常用的SPA单页应用模式，就是典型的前端渲染。</p><h4 id="二、两者的本质区别"><a href="#二、两者的本质区别" class="headerlink" title="二、两者的本质区别"></a>二、两者的本质区别</h4><p>两者本地的区别就是<strong>谁来完成html文件的完整拼接</strong>。如果在后端完成，然后返回给前端，那么就是服务端渲染；否则就是客户端渲染。</p><h4 id="三、服务端渲染的优缺点"><a href="#三、服务端渲染的优缺点" class="headerlink" title="三、服务端渲染的优缺点"></a>三、服务端渲染的优缺点</h4><h5 id="优点："><a href="#优点：" class="headerlink" title="优点："></a>优点：</h5><p>&emsp;1.不占用客户端资源，前端耗时少<br>&emsp;2.有利于SEO</p><h5 id="缺点："><a href="#缺点：" class="headerlink" title="缺点："></a>缺点：</h5><p>&emsp;1.占用服务端资源。如果请求量较多，会对服务器造成一定压力。<br>&emsp;2.不利于前后端分离，开发效率较低。</p><h4 id="四、客户端渲染的优缺点"><a href="#四、客户端渲染的优缺点" class="headerlink" title="四、客户端渲染的优缺点"></a>四、客户端渲染的优缺点</h4><h5 id="优点：-1"><a href="#优点：-1" class="headerlink" title="优点："></a>优点：</h5><p>&emsp;1.前后端分离。<br>&emsp;2.体验更好，接近于原生app。</p><h5 id="缺点：-1"><a href="#缺点：-1" class="headerlink" title="缺点："></a>缺点：</h5><p>&emsp;1.前端响应较慢，首屏加载缓慢。<br>&emsp;2.不利于SEO。</p><h5 id="SEO"><a href="#SEO" class="headerlink" title="SEO"></a>SEO</h5><p>后端渲染html叫吐或者喷，爬虫可以看到完整的呈现源码<br>前端模板渲染html叫填，爬虫看不到完整的呈现源码</p><p><img src="https://ws2.sinaimg.cn/large/006tNbRwly1fxuug2d9gwj316o0gcmy8.jpg" alt=""></p><h4 id="五、如何选择"><a href="#五、如何选择" class="headerlink" title="五、如何选择"></a>五、如何选择</h4><p>不谈业务场景而盲目选择使用何种渲染方式都是耍流氓。比如企业级网站，主要功能是展示而没有复杂的交互，并且需要良好的SEO，则这时我们就需要使用服务器端渲染；而类似后台管理页面，交互性比较强，不需要seo的考虑，那么就可以使用客户端渲染。</p><p>另外，具体使用何种渲染方法并不是绝对的，比如现在一些网站采用了首屏服务器端渲染，即对于用户最开始打开的那个页面采用的是服务器端渲染，这样就保证了渲染速度，而其他的页面采用客户端渲染，这样就完成了前后端分离。</p><h4 id="六、写在最后"><a href="#六、写在最后" class="headerlink" title="六、写在最后"></a>六、写在最后</h4><blockquote><p>2016 年 10 月 25 日，zeit.co 背后的团队对外发布了 Next.js，一个 React 的服务端渲染应用框架。几小时后，与 Next.js 异曲同工，一个基于 Vue.js 的服务端渲染应用框架应运而生，我们称之为：Nuxt.js。</p></blockquote><p>随着Next.js和Nuxt.js的发布，<strong>以前是 Back-end（或者说 Full-stack）工程师负责 SSR，但是现在是 Front-end 工程师负责 SSR 了啊。</strong></p><p>参考文章：<br><a href="https://www.cnblogs.com/zhuzhenwei918/p/8795945.html" target="_blank" rel="noopener">服务器端渲染和客户端渲染</a><br><a href="https://www.jianshu.com/p/3e62641eb381" target="_blank" rel="noopener">也谈服务端渲染（SSR）</a><br><a href="https://jkchao.cn/article/5a11155fb520d115154c8fa1" target="_blank" rel="noopener">服务端渲染 vs 客户端渲染</a><br><a href="https://www.zhihu.com/question/59578433" target="_blank" rel="noopener">为什么现在又流行服务端渲染html？-知乎</a><br><a href="https://blog.csdn.net/b9q8e64lo6mm/article/details/79418969" target="_blank" rel="noopener">为什么现在又流行服务器端渲染html？</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;服务端渲染VS客户端渲染&quot;&gt;&lt;a href=&quot;#服务端渲染VS客户端渲染&quot; class=&quot;headerlink&quot; title=&quot;服务端渲染VS客户端渲染&quot;&gt;&lt;/a&gt;服务端渲染VS客户端渲染&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;前几天被人问到了nuxt是啥东西，我就知道这东西是
      
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>跨域</title>
    <link href="http://yoursite.com/2018/12/03/%E8%B7%A8%E5%9F%9F/"/>
    <id>http://yoursite.com/2018/12/03/跨域/</id>
    <published>2018-12-02T22:20:50.000Z</published>
    <updated>2018-12-06T06:01:57.591Z</updated>
    
    <summary type="html">
    
    </summary>
    
      <category term="跨域" scheme="http://yoursite.com/categories/%E8%B7%A8%E5%9F%9F/"/>
    
    
  </entry>
  
  <entry>
    <title>label标签语义化</title>
    <link href="http://yoursite.com/2018/12/01/label%E6%A0%87%E7%AD%BE%E8%AF%AD%E4%B9%89%E5%8C%96/"/>
    <id>http://yoursite.com/2018/12/01/label标签语义化/</id>
    <published>2018-11-30T16:17:03.000Z</published>
    <updated>2018-12-06T05:11:01.511Z</updated>
    
    <content type="html"><![CDATA[<h2 id="label标签的语义化"><a href="#label标签的语义化" class="headerlink" title="label标签的语义化"></a>label标签的语义化</h2><hr><p>今天做一个问卷调研的需求的时候，如下图。用户点击A选项的文字的时候被选中，而不是只能点击A前面的圆圈的时候。</p><p><img src="https://ws4.sinaimg.cn/large/006tNbRwly1fxq5xd2ppyj30j20dyjtt.jpg" alt=""></p><p>html部分，需要使用input+label标签，其中label的for属性和input的id属性使用同一个变量。如下图：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">input</span> <span class="attr">type</span>=<span class="string">"radio"</span> <span class="attr">:id</span>=<span class="string">"subItem"</span> <span class="attr">class</span>=<span class="string">"checkbox"</span> <span class="attr">v-model</span>=<span class="string">"answers[index]"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">label</span> <span class="attr">:for</span>=<span class="string">"subItem"</span>&gt;</span>&#123;&#123;subItem&#125;&#125;<span class="tag">&lt;/<span class="name">label</span>&gt;</span></span><br></pre></td></tr></table></figure><p>刚开始用的p标签，一直不好使。后来解决了以后，去搜了一下label标签的语义化</p><blockquote><p>   <label> 标签为 input 元素定义标注（标记）。<br>     label 元素不会向用户呈现任何特殊效果。不过，它为鼠标用户改进了可用性。<br>     如果您在 label 元素内点击文本，就会触发此控件。<br>     就是说，当用户选择该标签时，浏览器就会自动将焦点转到和标签相关的表单控件上。<br>     <label> 标签的 for 属性应当与相关元素的 id 属性相同。</label></label></p></blockquote>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;label标签的语义化&quot;&gt;&lt;a href=&quot;#label标签的语义化&quot; class=&quot;headerlink&quot; title=&quot;label标签的语义化&quot;&gt;&lt;/a&gt;label标签的语义化&lt;/h2&gt;&lt;hr&gt;
&lt;p&gt;今天做一个问卷调研的需求的时候，如下图。用户点击A选项的文
      
    
    </summary>
    
      <category term="html" scheme="http://yoursite.com/categories/html/"/>
    
    
      <category term="label" scheme="http://yoursite.com/tags/label/"/>
    
  </entry>
  
  <entry>
    <title>函数参数的解构赋值和函数参数的默认值</title>
    <link href="http://yoursite.com/2018/11/30/%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E8%A7%A3%E6%9E%84%E8%B5%8B%E5%80%BC%E5%92%8C%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E7%9A%84%E9%BB%98%E8%AE%A4%E5%80%BC/"/>
    <id>http://yoursite.com/2018/11/30/函数参数的解构赋值和函数参数的默认值/</id>
    <published>2018-11-30T10:58:47.000Z</published>
    <updated>2018-12-06T05:11:01.515Z</updated>
    
    <content type="html"><![CDATA[<h2 id="es6中函数参数的解构赋值和函数参数的默认值"><a href="#es6中函数参数的解构赋值和函数参数的默认值" class="headerlink" title="es6中函数参数的解构赋值和函数参数的默认值"></a>es6中函数参数的解构赋值和函数参数的默认值</h2><hr><p>昨天在二刷阮一峰es6的时候，看到了一个思考题。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 写法一</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m1</span>(<span class="params">&#123;x = <span class="number">0</span>, y = <span class="number">0</span>&#125; = &#123;&#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">// 写法二</span></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">m2</span>(<span class="params">&#123;x, y&#125; = &#123; x: <span class="number">0</span>, y: <span class="number">0</span> &#125;</span>) </span>&#123;</span><br><span class="line">  <span class="keyword">return</span> [x, y];</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>以上两种写法的差异在哪里？</p><p>写法一中m1函数的入参是一个对象（默认值为一个空对象），该对象有两个属性，x（默认值为0）和y（默认值为0）。</p><p>写法二中m2函数的入参是一个对象（默认值为一个对象，对象x和y属性都为0）。</p><figure class="highlight js"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// 函数没有参数的情况</span></span><br><span class="line">m1() <span class="comment">// [0, 0]</span></span><br><span class="line">m2() <span class="comment">// [0, 0]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 都有值的情况</span></span><br><span class="line">m1(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;) <span class="comment">// [3, 8]</span></span><br><span class="line">m2(&#123;<span class="attr">x</span>: <span class="number">3</span>, <span class="attr">y</span>: <span class="number">8</span>&#125;) <span class="comment">// [3, 8]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 有值，y 无值的情况</span></span><br><span class="line">m1(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;) <span class="comment">// [3, 0]</span></span><br><span class="line">m2(&#123;<span class="attr">x</span>: <span class="number">3</span>&#125;) <span class="comment">// [3, undefined]</span></span><br><span class="line"></span><br><span class="line"><span class="comment">// x 和 y 都无值的情况</span></span><br><span class="line">m1(&#123;&#125;) <span class="comment">// [0, 0];</span></span><br><span class="line">m2(&#123;&#125;) <span class="comment">// [undefined, undefined]</span></span><br><span class="line"></span><br><span class="line">m1(&#123;<span class="attr">z</span>: <span class="number">3</span>&#125;) <span class="comment">// [0, 0]</span></span><br><span class="line">m2(&#123;<span class="attr">z</span>: <span class="number">3</span>&#125;) <span class="comment">// [undefined, undefined]</span></span><br></pre></td></tr></table></figure><p><a href="http://es6.ruanyifeng.com/#docs/function" target="_blank" rel="noopener">参考链接-阮一峰es6</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h2 id=&quot;es6中函数参数的解构赋值和函数参数的默认值&quot;&gt;&lt;a href=&quot;#es6中函数参数的解构赋值和函数参数的默认值&quot; class=&quot;headerlink&quot; title=&quot;es6中函数参数的解构赋值和函数参数的默认值&quot;&gt;&lt;/a&gt;es6中函数参数的解构赋值和函数参数的默
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="解构  函数参数默认值" scheme="http://yoursite.com/tags/%E8%A7%A3%E6%9E%84-%E5%87%BD%E6%95%B0%E5%8F%82%E6%95%B0%E9%BB%98%E8%AE%A4%E5%80%BC/"/>
    
  </entry>
  
  <entry>
    <title>flex布局</title>
    <link href="http://yoursite.com/2018/11/29/flex%E5%B8%83%E5%B1%80/"/>
    <id>http://yoursite.com/2018/11/29/flex布局/</id>
    <published>2018-11-28T17:06:01.000Z</published>
    <updated>2018-12-05T08:21:43.628Z</updated>
    
    <content type="html"><![CDATA[<h3 id="今天发现一个flex的问题"><a href="#今天发现一个flex的问题" class="headerlink" title="今天发现一个flex的问题"></a>今天发现一个flex的问题</h3><hr><p>flex布局中的justify-content: space-evenly;在部分安卓手机上是不支持这个属性的。</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">space-evenly</span></span><br></pre></td></tr></table></figure><h3 id="解决方案"><a href="#解决方案" class="headerlink" title="解决方案"></a>解决方案</h3><p>可以使用space-around或者space-between配合margin一起使用达到space-evenly的效果</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">space-around</span></span><br></pre></td></tr></table></figure><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-tag">justify-content</span>: <span class="selector-tag">space-between</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      
      
        &lt;h3 id=&quot;今天发现一个flex的问题&quot;&gt;&lt;a href=&quot;#今天发现一个flex的问题&quot; class=&quot;headerlink&quot; title=&quot;今天发现一个flex的问题&quot;&gt;&lt;/a&gt;今天发现一个flex的问题&lt;/h3&gt;&lt;hr&gt;
&lt;p&gt;flex布局中的justify-conte
      
    
    </summary>
    
      <category term="css" scheme="http://yoursite.com/categories/css/"/>
    
    
      <category term="flex" scheme="http://yoursite.com/tags/flex/"/>
    
  </entry>
  
  <entry>
    <title>异步编程的前世今生</title>
    <link href="http://yoursite.com/2018/11/28/%E5%BC%82%E6%AD%A5%E7%BC%96%E7%A8%8B%E7%9A%84%E5%89%8D%E4%B8%96%E4%BB%8A/"/>
    <id>http://yoursite.com/2018/11/28/异步编程的前世今/</id>
    <published>2018-11-27T18:20:25.000Z</published>
    <updated>2018-11-30T09:09:15.028Z</updated>
    
    <content type="html"><![CDATA[<p>一、问题起源：因为JS只有一根线程，因此异步编程对JS很重要。</p><p>二、目的：异步编程的语法目标，就是怎样让它更像同步编程。</p><p>三、很久很久以前：异步编程的方法有四种：</p><p>  1、回调函数；</p><p>  2、事件监听；</p><p>  3、发布/订阅；</p><p>  4、Promise对象。</p><p>四、回调函数的故事：</p><p>  1、概念：JS对异步编程的实现就是回调函数。所谓回调函数，就是把任务的第二段单独写在一个函数里面，等到重新执行这个任务的时候，就直接调用这个函数。</p><p>  2、局限性：回调函数本身没有问题，但是多个回调函数嵌套的时候就会有问题。会导致代码横向发展，而不是纵向发展。称之为回调地狱。</p><p>  3、解决之道：为了解决该问题，Promise诞生了，它不是新的语法功能，而是一种新的写法，允许将回调函数的横向加载改为纵向加载。</p><p>  4、改进的地方：Promise 的写法只是回调函数的改进，使用then方法以后，异步任务的两段执行看得更清楚了，除此以外，并无新意。</p><p>  5、新面临的问题：然后，Promise也面临一个巨大的问题，代码冗余，原来的任务被Promise包装一下，一眼看去都是一堆then，语义变的不清楚。</p><p>五、协程的故事：</p><p>  1、概念：传统的编程语言，早有异步编程的解决方案（其实是多任务的解决方案）。其中有一种叫做”协程”（coroutine），意思是多个线程互相协作，完成异步任务。</p><p>  2、本质：协程的终极奥义就在于yield命令，它表示执行到此处，执行权将交给其他协程。即yield命令是异步两个阶段的分界线。</p><p>  3、协程在ES6中的衍生及其特点：于是乎，Generator函数诞生了。它是协程在ES6中的实现，其最大特点就是可以交出函数的执行权，即暂停执行。整个 Generator 函数就是一个封装的异步任务，或者说是异步任务的容器。异步操作需要暂停的地方，都用 yield 语句注明。</p><p>  4、Generator的另外两个特性：Generator 函数可以暂停执行和恢复执行，这是它能封装异步任务的根本原因。除此之外，它还有两个特性，使它可以作为异步编程的完整解决方案：函数体内外的数据交换和错误处理机制。</p><p>  5、函数体内外数据交换：next 方法返回值的 value 属性，是 Generator 函数向外输出数据；next 方法还可以接受参数，这是向 Generator 函数体内输入数据。</p><p>  6、错误处理机制：Generator 函数内部还可以部署错误处理代码，捕获函数体外抛出的错误。</p><p>  7、Generator函数的局限：</p><p>  7.1不能自动执行</p><p>  7.2程序的执行权移出以后，需要再次交换回来。</p><p>  综上所述：Generator 函数就是一个异步操作的容器。它的自动执行需要一种机制（即自动执行器），当异步操作有了结果，能够自动交回执行权</p><p>  8、两种解决之道：由于Generator函数中的yield 命令用于将程序的执行权移出 Generator 函数，那么就需要一种方法，将执行权再交还给 Generator 函数。</p><p>  基于Thunk函数的自动执行器：回调函数。将异步操作包装成 Thunk 函数，在回调函数里面交回执行权。</p><p>  基于Promise对象的自动执行器：Promise 对象。将异步操作包装成 Promise 对象，用 then 方法交回执行权。</p><p>  9、co函数库，用于Generator函数的自动执行。它可以使你不用编写Generator函数的执行器。其原理就是将两种自动执行器（Thunk 函数和 Promise 对象），包装成一个库。使用 co 的前提条件是，Generator 函数的 yield 命令后面，只能是 Thunk 函数或 Promise 对象。</p><p>六、异步编程的终极解决之道：async函数</p><p>  1、概念：一句话，async函数就是Generator函数的语法糖。</p><p>  2、改进点：async函数对Generator函数的改进体现在以下几点：</p><p>  2.1内置执行器</p><p>  Generator 函数的执行必须靠执行器，所以才有了 co 函数库，而 async 函数自带执行器。也就是说，async 函数的执行，与普通函数一模一样，只要一行。</p><p>  2.2更好的语义</p><p>  async 和 await，比起星号和 yield，语义更清楚了。async 表示函数里有异步操作，await 表示紧跟在后面的表达式需要等待结果。</p><p>  2.3更广的适用性</p><p>  co 函数库约定，yield 命令后面只能是 Thunk 函数或 Promise 对象，而 async 函数的 await 命令后面，可以跟 Promise 对象和原始类型的值（数值、字符串和布尔值，但这时等同于同步操作）。所以，async函数的实现，就是把Generator函数和自动执行器包装在一个函数里。</p><p>  2.4返回值是Promise</p><p>  async函数的返回值是 Promise 对象。</p><p>  3、使用手册说明：</p><p>  3.1await命令后面的Promise对象，运行结果可能是rejected，所以最好把await命令放在try…catch中。</p><p>  3.2await命令只能用在async函数中，如果用在普通函数中，就会报错。</p><p>  3.3如有多个请求并发执行，请使用Promise.all方法。</p><p><a href="http://www.ruanyifeng.com/blog/2015/04/generator.html" target="_blank" rel="noopener">参考链接</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;一、问题起源：因为JS只有一根线程，因此异步编程对JS很重要。&lt;/p&gt;
&lt;p&gt;二、目的：异步编程的语法目标，就是怎样让它更像同步编程。&lt;/p&gt;
&lt;p&gt;三、很久很久以前：异步编程的方法有四种：&lt;/p&gt;
&lt;p&gt;  1、回调函数；&lt;/p&gt;
&lt;p&gt;  2、事件监听；&lt;/p&gt;
&lt;p&gt;
      
    
    </summary>
    
      <category term="js" scheme="http://yoursite.com/categories/js/"/>
    
    
      <category term="异步 Promise Generator async" scheme="http://yoursite.com/tags/%E5%BC%82%E6%AD%A5-Promise-Generator-async/"/>
    
  </entry>
  
  <entry>
    <title>Hello World</title>
    <link href="http://yoursite.com/2018/11/27/hello-world/"/>
    <id>http://yoursite.com/2018/11/27/hello-world/</id>
    <published>2018-11-26T16:17:03.000Z</published>
    <updated>2018-12-04T07:07:18.095Z</updated>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/" target="_blank" rel="noopener">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/" target="_blank" rel="noopener">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html" target="_blank" rel="noopener">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues" target="_blank" rel="noopener">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo new <span class="string">"My New Post"</span></span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html" target="_blank" rel="noopener">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html" target="_blank" rel="noopener">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html" target="_blank" rel="noopener">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/deployment.html" target="_blank" rel="noopener">Deployment</a></p>]]></content>
    
    <summary type="html">
    
      
      
        &lt;p&gt;Welcome to &lt;a href=&quot;https://hexo.io/&quot; target=&quot;_blank&quot; rel=&quot;noopener&quot;&gt;Hexo&lt;/a&gt;! This is your very first post. Check &lt;a href=&quot;https://hexo.
      
    
    </summary>
    
    
  </entry>
  
</feed>
